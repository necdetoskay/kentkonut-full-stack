'use client';

import { useEditor, EditorContent } from '@tiptap/react';
import StarterKit from '@tiptap/starter-kit';
import Link from '@tiptap/extension-link';
import TextAlign from '@tiptap/extension-text-align';
import BulletList from '@tiptap/extension-bullet-list';
import OrderedList from '@tiptap/extension-ordered-list';
import ListItem from '@tiptap/extension-list-item';
import { CustomImage } from './extensions/CustomImage';
import { useCallback, useEffect, useState } from 'react';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Slider } from '@/components/ui/slider';
import { GlobalMediaSelector, GlobalMediaFile } from '@/components/media/GlobalMediaSelector';
import {
  Bold,
  Italic,
  Strikethrough,
  Code,
  List,
  ListOrdered,
  Quote,
  Undo,
  Redo,
  AlignLeft,
  AlignCenter,
  AlignRight,
  Link as LinkIcon,
  Image as ImageIcon,
  Heading1,
  Heading2,
  Heading3,
  Move,
  RotateCcw,
} from 'lucide-react';

interface RichTextEditorProps {
  content: string;
  onChange: (content: string) => void;
  placeholder?: string;
  className?: string;
  minHeight?: string;
  maxHeight?: string;
  disabled?: boolean;
}

export default function RichTextEditor({
  content,
  onChange,
  placeholder = "İçerik yazın...",
  className = "",
  minHeight = "200px",
  maxHeight = "500px",
  disabled = false
}: RichTextEditorProps) {
  const [imageDialogOpen, setImageDialogOpen] = useState(false);
  const [imageUrl, setImageUrl] = useState('');
  const [imageAlt, setImageAlt] = useState('');
  const [imageAlign, setImageAlign] = useState('center');
  const [imageWidth, setImageWidth] = useState<number>(400);
  const [imageHeight, setImageHeight] = useState<number>(300);
  const [maintainAspectRatio, setMaintainAspectRatio] = useState(true);
  const [originalAspectRatio, setOriginalAspectRatio] = useState<number>(1);

  const editor = useEditor({
    extensions: [
      StarterKit.configure({
        bulletList: false,
        orderedList: false,
        listItem: false,
      }),
      BulletList.configure({
        HTMLAttributes: {
          class: 'prose-bullet-list',
        },
      }),
      OrderedList.configure({
        HTMLAttributes: {
          class: 'prose-ordered-list',
        },
      }),
      ListItem,
      CustomImage.configure({
        inline: false,
        allowBase64: true,
        HTMLAttributes: {
          class: 'tiptap-image',
        },
      }),
      Link.configure({
        openOnClick: false,
        HTMLAttributes: {
          class: 'prose-link',
        },
      }),
      TextAlign.configure({
        types: ['heading', 'paragraph'],
      }),
    ],
    content,
    editable: !disabled,
    onUpdate: ({ editor }) => {
      onChange(editor.getHTML());
    },
  });
  useEffect(() => {
    if (editor && content !== editor.getHTML()) {
      editor.commands.setContent(content);
    }
  }, [content, editor]);

  const openImageDialog = useCallback(() => {
    setImageUrl('');
    setImageAlt('');
    setImageAlign('center');
    setImageWidth(400);
    setImageHeight(300);
    setOriginalAspectRatio(400 / 300);
    setMaintainAspectRatio(true);
    setImageDialogOpen(true);
  }, []);

  const insertImage = useCallback(() => {
    if (imageUrl && editor) {
      editor.chain().focus().setCustomImage({
        src: imageUrl,
        alt: imageAlt,
        align: imageAlign as 'left' | 'center' | 'right' | 'float-left' | 'float-right',
        width: imageWidth,
        height: imageHeight,
      }).run();
      
      setImageDialogOpen(false);
      setImageUrl('');
      setImageAlt('');
      setImageAlign('center');
      setImageWidth(400);
      setImageHeight(300);
    }
  }, [editor, imageUrl, imageAlt, imageAlign, imageWidth, imageHeight]);

  const handleMediaSelect = useCallback((media: GlobalMediaFile | null) => {
    if (media?.url) {
      setImageUrl(media.url);
      setImageAlt(media.alt || media.filename || '');
      
      // Try to get image dimensions
      const img = new Image();
      img.onload = () => {
        const aspectRatio = img.width / img.height;
        setOriginalAspectRatio(aspectRatio);
        
        // Set reasonable default size
        if (img.width > 800) {
          setImageWidth(800);
          setImageHeight(Math.round(800 / aspectRatio));
        } else {
          setImageWidth(img.width);
          setImageHeight(img.height);
        }
      };
      img.src = media.url;
    }
  }, []);

  const handleWidthChange = useCallback((newWidth: number) => {
    setImageWidth(newWidth);
    if (maintainAspectRatio && originalAspectRatio) {
      setImageHeight(Math.round(newWidth / originalAspectRatio));
    }
  }, [maintainAspectRatio, originalAspectRatio]);

  const handleHeightChange = useCallback((newHeight: number) => {
    setImageHeight(newHeight);
    if (maintainAspectRatio && originalAspectRatio) {
      setImageWidth(Math.round(newHeight * originalAspectRatio));
    }
  }, [maintainAspectRatio, originalAspectRatio]);

  const resetImageSize = useCallback(() => {
    if (imageUrl) {
      const img = new Image();
      img.onload = () => {
        setImageWidth(img.width);
        setImageHeight(img.height);
        setOriginalAspectRatio(img.width / img.height);
      };
      img.src = imageUrl;
    }
  }, [imageUrl]);

  const setLink = useCallback(() => {
    const previousUrl = editor?.getAttributes('link').href;
    const url = window.prompt('Link URL\'si girin:', previousUrl);

    if (url === null) {
      return;
    }

    if (url === '') {
      editor?.chain().focus().extendMarkRange('link').unsetLink().run();
      return;
    }

    editor?.chain().focus().extendMarkRange('link').setLink({ href: url }).run();
  }, [editor]);

  if (!editor) {
    return null;
  }

  return (
    <>
      <div className={`border border-gray-300 rounded-lg overflow-hidden ${className}`}>
        {/* Toolbar */}
        <div className="border-b border-gray-200 p-2 flex flex-wrap gap-1 bg-gray-50">
          {/* Text Formatting */}
          <Button
            type="button"
            variant={editor.isActive('bold') ? 'default' : 'outline'}
            size="sm"
            onClick={() => editor.chain().focus().toggleBold().run()}
            disabled={disabled}
          >
            <Bold className="h-4 w-4" />
          </Button>
          
          <Button
            type="button"
            variant={editor.isActive('italic') ? 'default' : 'outline'}
            size="sm"
            onClick={() => editor.chain().focus().toggleItalic().run()}
            disabled={disabled}
          >
            <Italic className="h-4 w-4" />
          </Button>
          
          <Button
            type="button"
            variant={editor.isActive('strike') ? 'default' : 'outline'}
            size="sm"
            onClick={() => editor.chain().focus().toggleStrike().run()}
            disabled={disabled}
          >
            <Strikethrough className="h-4 w-4" />
          </Button>
          
          <Button
            type="button"
            variant={editor.isActive('code') ? 'default' : 'outline'}
            size="sm"
            onClick={() => editor.chain().focus().toggleCode().run()}
            disabled={disabled}
          >
            <Code className="h-4 w-4" />
          </Button>

          <div className="w-px h-6 bg-gray-300 mx-1" />

          {/* Headings */}
          <Button
            type="button"
            variant={editor.isActive('heading', { level: 1 }) ? 'default' : 'outline'}
            size="sm"
            onClick={() => editor.chain().focus().toggleHeading({ level: 1 }).run()}
            disabled={disabled}
          >
            <Heading1 className="h-4 w-4" />
          </Button>
          
          <Button
            type="button"
            variant={editor.isActive('heading', { level: 2 }) ? 'default' : 'outline'}
            size="sm"
            onClick={() => editor.chain().focus().toggleHeading({ level: 2 }).run()}
            disabled={disabled}
          >
            <Heading2 className="h-4 w-4" />
          </Button>
          
          <Button
            type="button"
            variant={editor.isActive('heading', { level: 3 }) ? 'default' : 'outline'}
            size="sm"
            onClick={() => editor.chain().focus().toggleHeading({ level: 3 }).run()}
            disabled={disabled}
          >
            <Heading3 className="h-4 w-4" />
          </Button>

          <div className="w-px h-6 bg-gray-300 mx-1" />

          {/* Lists */}
          <Button
            type="button"
            variant={editor.isActive('bulletList') ? 'default' : 'outline'}
            size="sm"
            onClick={() => editor.chain().focus().toggleBulletList().run()}
            disabled={disabled}
          >
            <List className="h-4 w-4" />
          </Button>
          
          <Button
            type="button"
            variant={editor.isActive('orderedList') ? 'default' : 'outline'}
            size="sm"
            onClick={() => editor.chain().focus().toggleOrderedList().run()}
            disabled={disabled}
          >
            <ListOrdered className="h-4 w-4" />
          </Button>
          
          <Button
            type="button"
            variant={editor.isActive('blockquote') ? 'default' : 'outline'}
            size="sm"
            onClick={() => editor.chain().focus().toggleBlockquote().run()}
            disabled={disabled}
          >
            <Quote className="h-4 w-4" />
          </Button>

          <div className="w-px h-6 bg-gray-300 mx-1" />

          {/* Alignment */}
          <Button
            type="button"
            variant={editor.isActive({ textAlign: 'left' }) ? 'default' : 'outline'}
            size="sm"
            onClick={() => editor.chain().focus().setTextAlign('left').run()}
            disabled={disabled}
          >
            <AlignLeft className="h-4 w-4" />
          </Button>
          
          <Button
            type="button"
            variant={editor.isActive({ textAlign: 'center' }) ? 'default' : 'outline'}
            size="sm"
            onClick={() => editor.chain().focus().setTextAlign('center').run()}
            disabled={disabled}
          >
            <AlignCenter className="h-4 w-4" />
          </Button>
          
          <Button
            type="button"
            variant={editor.isActive({ textAlign: 'right' }) ? 'default' : 'outline'}
            size="sm"
            onClick={() => editor.chain().focus().setTextAlign('right').run()}
            disabled={disabled}
          >
            <AlignRight className="h-4 w-4" />
          </Button>

          <div className="w-px h-6 bg-gray-300 mx-1" />

          {/* Media */}
          <Button
            type="button"
            variant="outline"
            size="sm"
            onClick={setLink}
            disabled={disabled}
          >
            <LinkIcon className="h-4 w-4" />
          </Button>
          
          <Button
            type="button"
            variant="outline"
            size="sm"
            onClick={openImageDialog}
            disabled={disabled}
          >
            <ImageIcon className="h-4 w-4" />
          </Button>

          <div className="w-px h-6 bg-gray-300 mx-1" />

          {/* Undo/Redo */}
          <Button
            type="button"
            variant="outline"
            size="sm"
            onClick={() => editor.chain().focus().undo().run()}
            disabled={disabled || !editor.can().chain().focus().undo().run()}
          >
            <Undo className="h-4 w-4" />
          </Button>
          
          <Button
            type="button"
            variant="outline"
            size="sm"
            onClick={() => editor.chain().focus().redo().run()}
            disabled={disabled || !editor.can().chain().focus().redo().run()}
          >
            <Redo className="h-4 w-4" />
          </Button>
        </div>

        {/* Editor */}
        <div 
          className="prose prose-sm max-w-none p-4 focus-within:outline-none"
          style={{ 
            minHeight,
            maxHeight,
            overflowY: 'auto'
          }}
        >
          <EditorContent 
            editor={editor} 
            className="outline-none focus:outline-none min-h-full"
            placeholder={placeholder}
          />
        </div>
      </div>

      {/* Image Dialog */}
      <Dialog open={imageDialogOpen} onOpenChange={setImageDialogOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Resim Ekle</DialogTitle>
          </DialogHeader>
          
          <div className="space-y-4">
            {/* Media Selector */}
            <div>
              <Label>Medya Galerisinden Seç</Label>              <div className="mt-2">
                <GlobalMediaSelector
                  onSelect={handleMediaSelect}
                  defaultCategory="content-images"
                  trigger={
                    <Button type="button" variant="outline" className="w-full">
                      {imageUrl ? "Görsel Seçildi" : "Görsel Seç"}
                    </Button>
                  }
                />
              </div>
            </div>

            {/* Manual URL Input */}
            <div>
              <Label htmlFor="imageUrl">Veya Manuel URL Girin</Label>
              <Input
                id="imageUrl"
                placeholder="https://example.com/image.jpg"
                value={imageUrl}
                onChange={(e) => setImageUrl(e.target.value)}
              />
            </div>

            {/* Alt Text */}
            <div>
              <Label htmlFor="imageAlt">Alt Metin (Opsiyonel)</Label>
              <Input
                id="imageAlt"
                placeholder="Resim açıklaması"
                value={imageAlt}
                onChange={(e) => setImageAlt(e.target.value)}
              />
            </div>            {/* Alignment */}
            <div>
              <Label>Hizalama ve Konumlandırma</Label>
              <Select value={imageAlign} onValueChange={setImageAlign}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="center">Merkez (Blok)</SelectItem>
                  <SelectItem value="left">Sol (Blok)</SelectItem>
                  <SelectItem value="right">Sağ (Blok)</SelectItem>
                  <SelectItem value="float-left">Sol Float (Text Sarması)</SelectItem>
                  <SelectItem value="float-right">Sağ Float (Text Sarması)</SelectItem>
                  <SelectItem value="float-none">Float Yok</SelectItem>
                </SelectContent>
              </Select>
            </div>

            {/* Size Controls */}
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <Label>Boyutlandırma</Label>
                <div className="flex items-center gap-2">
                  <Label htmlFor="maintainAspectRatio" className="text-sm">
                    Oranı Koru
                  </Label>
                  <input
                    id="maintainAspectRatio"
                    type="checkbox"
                    checked={maintainAspectRatio}
                    onChange={(e) => setMaintainAspectRatio(e.target.checked)}
                    className="w-4 h-4"
                  />
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={resetImageSize}
                    title="Orijinal boyuta döndür"
                  >
                    <RotateCcw className="w-3 h-3" />
                  </Button>
                </div>
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="imageWidth" className="text-sm">Genişlik (px)</Label>
                  <Input
                    id="imageWidth"
                    type="number"
                    min="50"
                    max="1200"
                    value={imageWidth}
                    onChange={(e) => handleWidthChange(parseInt(e.target.value) || 400)}
                    className="mt-1"
                  />
                  <Slider
                    value={[imageWidth]}
                    onValueChange={([value]) => handleWidthChange(value)}
                    min={50}
                    max={1200}
                    step={10}
                    className="mt-2"
                  />
                </div>
                
                <div>
                  <Label htmlFor="imageHeight" className="text-sm">Yükseklik (px)</Label>
                  <Input
                    id="imageHeight"
                    type="number"
                    min="50"
                    max="800"
                    value={imageHeight}
                    onChange={(e) => handleHeightChange(parseInt(e.target.value) || 300)}
                    className="mt-1"
                    disabled={maintainAspectRatio}
                  />
                  <Slider
                    value={[imageHeight]}
                    onValueChange={([value]) => handleHeightChange(value)}
                    min={50}
                    max={800}
                    step={10}
                    className="mt-2"
                    disabled={maintainAspectRatio}
                  />
                </div>
              </div>
            </div>
                  <SelectItem value="float-right">Sağ Float (Text Sarması)</SelectItem>
                  <SelectItem value="float-none">Float Yok</SelectItem>
                </SelectContent>
              </Select>
            </div>            {/* Preview */}
            {imageUrl && (
              <div className="border rounded-lg p-4">
                <Label className="text-sm text-gray-600">Önizleme:</Label>
                {imageAlign.startsWith('float-') ? (
                  <div className="mt-2 relative">
                    <div className={`tiptap-image-container tiptap-image-${imageAlign}`}>
                      <img 
                        src={imageUrl} 
                        alt={imageAlt} 
                        className="max-w-full h-auto max-h-24 object-contain rounded"
                      />
                    </div>
                    <p className="text-xs text-gray-500 mt-2">
                      Bu bir örnek paragraftır. Floating resim seçildiğinde, text resmin etrafına bu şekilde sarılacaktır. 
                      Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                    </p>
                    <div style={{ clear: 'both' }}></div>
                  </div>
                ) : (
                  <div className={`mt-2 tiptap-image-container tiptap-image-${imageAlign}`}>
                    <img 
                      src={imageUrl} 
                      alt={imageAlt} 
                      className="max-w-full h-auto max-h-32 object-contain rounded"
                      style={{
                        marginLeft: imageAlign === 'left' ? '0' : imageAlign === 'center' ? 'auto' : 'auto',
                        marginRight: imageAlign === 'right' ? '0' : imageAlign === 'center' ? 'auto' : 'auto',
                        display: 'block'
                      }}
                    />
                  </div>
                )}
              </div>
            )}
          </div>

          <DialogFooter>
            <Button variant="outline" onClick={() => setImageDialogOpen(false)}>
              İptal
            </Button>
            <Button onClick={insertImage} disabled={!imageUrl}>
              Resim Ekle
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
}
