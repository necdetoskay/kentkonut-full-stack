# nginx.conf for KentKonut Frontend
events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;
    error_log   /var/log/nginx/error.log warn;

    # Basic settings
    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout  65;
    types_hash_max_size 2048;
    client_max_body_size 10M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json
        application/xml
        image/svg+xml;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    server {
        listen       3020;
        server_name  localhost;
        
        root   /usr/share/nginx/html;
        index  index.html index.htm;
        
        # Health check endpoint for Docker
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Proxy banner images to backend (MUST be before static asset rules)
        location /banners/ {
            proxy_pass http://kentkonut-backend:3021/banners/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Cache banner images
            expires 1d;
            add_header Cache-Control "public, max-age=86400" always;

            # Handle errors gracefully
            proxy_intercept_errors on;
            error_page 404 = @banner_fallback;
        }

        # Fallback for missing banner images
        location @banner_fallback {
            return 204; # No content instead of 404
        }

        # API proxy to backend service
        location /api/ {
            proxy_pass http://kentkonut-backend:3021;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 86400;
        }
        
        # Serve JavaScript modules with strict MIME type enforcement
        location ~* \.m?js$ {
            try_files $uri =404;
            add_header Content-Type "application/javascript; charset=utf-8" always;
            add_header Cache-Control "public, max-age=31536000, immutable" always;
            add_header Vary "Accept-Encoding" always;
            add_header X-Content-Type-Options "nosniff" always;
            error_page 404 =404 /404.html;
        }

        # Serve CSS files with proper headers
        location ~* \.css$ {
            try_files $uri =404;
            add_header Content-Type "text/css; charset=utf-8" always;
            add_header Cache-Control "public, max-age=31536000, immutable" always;
            add_header Vary "Accept-Encoding" always;
            add_header X-Content-Type-Options "nosniff" always;
            error_page 404 =404 /404.html;
        }

        # Serve other static assets with proper caching (exclude /banners/ path)
        location ~* ^/(?!banners/).*\.(png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|webp|avif)$ {
            try_files $uri =404;
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable" always;
            add_header Vary "Accept-Encoding" always;
            error_page 404 =404 /404.html;
        }

        # Handle HTML files with short cache
        location ~* \.html$ {
            try_files $uri =404;
            expires 5m;
            add_header Cache-Control "public, max-age=300, must-revalidate" always;
            add_header X-Content-Type-Options "nosniff" always;
            error_page 404 =404 /404.html;
        }

        # Handle specific development files that should return 404
        location ~* ^/(src/|\.env|\.git|node_modules|package\.json|vite\.config|tsconfig) {
            return 404;
        }

        # Handle service worker files
        location ~* ^/(sw\.js|service-worker\.js|dev-sw\.js)$ {
            try_files $uri =404;
            add_header Content-Type "application/javascript; charset=utf-8" always;
            add_header Cache-Control "no-cache, no-store, must-revalidate" always;
            add_header Pragma "no-cache" always;
            add_header Expires "0" always;
        }

        # Handle manifest and other PWA files
        location ~* ^/(manifest\.json|robots\.txt|sitemap\.xml)$ {
            try_files $uri =404;
            expires 1d;
            add_header Cache-Control "public, max-age=86400" always;
        }

        # Handle client-side routing for SPA (MUST be last)
        location / {
            try_files $uri $uri/ @fallback;
        }

        # Fallback for SPA routing - only for non-asset requests
        location @fallback {
            # Check if this looks like an asset request
            if ($uri ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|webp|avif|json|xml|txt)$) {
                return 404;
            }

            # Serve index.html for SPA routes
            try_files /index.html =404;
            
            # Prevent caching of SPA routes
            add_header Cache-Control "no-cache, no-store, must-revalidate" always;
            add_header Pragma "no-cache" always;
            add_header Expires "0" always;
        }
        
        # Error pages
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
    }
}
